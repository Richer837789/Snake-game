<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #ecf0f1;
            font-family: 'Arial', sans-serif;
            overflow: hidden;
            position: relative;
        }
        canvas {
            border: 5px solid #34495e;
            border-radius: 10px;
            background: #bdc3c7;
        }
        .score {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 25px;
            color: #2c3e50;
        }
        .controls {
            position: absolute;
            bottom: 30px;
            width: 100%;
            display: flex;
            justify-content: space-between;
            padding: 10px 20px;
        }
        .left-controls, .right-controls {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        .button {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: #2c3e50;
            margin: 5px;
            color: white;
            font-size: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        .left-controls {
            align-items: flex-start;
        }
        .right-controls {
            align-items: flex-end;
        }
    </style>
</head>
<body>
    <div class="score">Score: 0</div>
    <canvas id="gameCanvas" width="600" height="400"></canvas>
    <div class="controls">
        <div class="left-controls">
            <div class="button" id="up">&#8593;</div>
            <div class="button" id="down">&#8595;</div>
        </div>
        <div class="right-controls">
            <div class="button" id="left">&#8592;</div>
            <div class="button" id="right">&#8594;</div>
        </div>
    </div>
    
    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");
        const box = 20;
        let snake = [{ x: 9 * box, y: 10 * box }];
        let food = {
            x: Math.floor(Math.random() * 29) * box,
            y: Math.floor(Math.random() * 19) * box
        };
        let score = 0;
        let d = "RIGHT"; // Initial direction
        let gameSpeed = 100; // Initial speed of the game

        // Controls for Mobile (Buttons)
        document.getElementById('up').addEventListener('click', () => changeDirection('UP'));
        document.getElementById('down').addEventListener('click', () => changeDirection('DOWN'));
        document.getElementById('left').addEventListener('click', () => changeDirection('LEFT'));
        document.getElementById('right').addEventListener('click', () => changeDirection('RIGHT'));

        // Keyboard Controls (optional for desktop testing)
        document.addEventListener("keydown", direction);

        function direction(event) {
            if (event.keyCode === 37 && d !== "RIGHT") d = "LEFT";
            else if (event.keyCode === 38 && d !== "DOWN") d = "UP";
            else if (event.keyCode === 39 && d !== "LEFT") d = "RIGHT";
            else if (event.keyCode === 40 && d !== "UP") d = "DOWN";
        }

        function changeDirection(newDirection) {
            if (d !== newDirection) {
                d = newDirection;
            }
        }

        function collision(head, array) {
            for (let i = 0; i < array.length; i++) {
                if (head.x === array[i].x && head.y === array[i].y) {
                    return true;
                }
            }
            return false;
        }

        function drawGame() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw the border
            ctx.strokeStyle = "#34495e";
            ctx.lineWidth = 5;
            ctx.strokeRect(0, 0, canvas.width, canvas.height);

            // Draw Snake with shadow effect
            for (let i = 0; i < snake.length; i++) {
                ctx.fillStyle = (i === 0) ? "#27ae60" : "#2ecc71";
                ctx.shadowColor = "#1e8449";
                ctx.shadowBlur = 10;
                ctx.fillRect(snake[i].x, snake[i].y, box, box);
                ctx.strokeStyle = "#1e8449";
                ctx.strokeRect(snake[i].x, snake[i].y, box, box);
            }

            // Draw Snake Face on Head
            const head = snake[0];
            ctx.fillStyle = "#fff";
            ctx.beginPath();
            ctx.arc(head.x + box / 2, head.y + box / 2, 5, 0, Math.PI * 2); // Eyes
            ctx.fill();

            // Draw Food with animation effect
            ctx.fillStyle = "#e74c3c";
            ctx.beginPath();
            ctx.arc(food.x + box / 2, food.y + box / 2, 10, 0, Math.PI * 2); // Food
            ctx.fill();

            // Old head position
            let snakeX = snake[0].x;
            let snakeY = snake[0].y;

            // Move the snake based on direction
            if (d === "LEFT") snakeX -= box;
            if (d === "UP") snakeY -= box;
            if (d === "RIGHT") snakeX += box;
            if (d === "DOWN") snakeY += box;

            // If the snake eats the food
            if (snakeX === food.x && snakeY === food.y) {
                score++;
                // Increase speed every time the snake eats food
                if (gameSpeed > 50) {
                    gameSpeed -= 10; // Speed up the game
                }
                food = {
                    x: Math.floor(Math.random() * 29) * box,
                    y: Math.floor(Math.random() * 19) * box
                };
            } else {
                snake.pop(); // Remove last part of snake
            }

            // Add new Head
            const newHead = { x: snakeX, y: snakeY };

            // Game Over conditions
            if (snakeX < 0 || snakeX >= canvas.width || snakeY < 0 || snakeY >= canvas.height || collision(newHead, snake)) {
                clearInterval(game);
                alert("Game Over! Your score: " + score);
                location.reload(); // Restart the game
            }

            snake.unshift(newHead);

            // Update Score
            document.querySelector(".score").innerText = "Score: " + score;
        }

        // Run the game at the specified speed
        let game = setInterval(drawGame, gameSpeed);
    </script>
</body>
</html>
